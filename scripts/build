#!/usr/bin/env node
const _ = require('lodash');
const minimist = require('minimist');
const {
  Commands,
  getPackages,
  changelogJson
} = require('@pie-framework/build-helper');
const args = minimist(process.argv.slice(2));
const { resolve, join } = require('path');

class LibCommands extends Commands {
  async deploy() {
    const demoDir = resolve(this.projectRoot, 'packages', 'demo');
    const next = this.bin('next');
    await this.runCmds([`${next} build`, `${next} export`], { cwd: demoDir });

    const alias = `pie-lib${args.next ? '-next' : ''}`;
    return this.staticToNow(resolve(demoDir, 'out'), alias);
  }

  /**
   * Override this so that the changelogs dont get removed.
   * We want to pull them in to the demo site build.
   */
  afterPublish() {
    return Promise.resolve(undefined);
  }

  async logChangelog() {
    const packages = _.take(getPackages(join(this.projectRoot, 'packages')), 1);

    const changelogs = await Promise.all(
      packages.map(p => changelogJson(p, { type: 'released' }))
    );
    console.log('changelogs', changelogs);
    const unreleased = await Promise.all(
      packages.map(p => changelogJson(p, { type: 'unreleased' }))
    );
    console.log('unreleased', unreleased);
  }
}

const cmds = new LibCommands(resolve(__dirname, '..'), args);

cmds
  .execute()
  .then(() => {
    console.log('all done');
    process.exit(0);
  })
  .catch(e => {
    console.error(e);
    process.exit(1);
  });
