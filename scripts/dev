#!/usr/bin/env node

const argv = require('minimist')(process.argv.slice(2));
const fs = require('fs-extra');
const { join } = require('path');
const _ = require('lodash');
const { spawnSync, spawn } = require('child_process');

process.on('unhandledRejection', error => {
  // Will print "unhandledRejection err is not defined"
  console.error(error.message);
});
const isDemoInstalled = async () => {
  const exists = await fs.exists('demo/node_modules');
  if (exists) {
    const stat = await fs.stat('demo/node_modules');
    return stat.isDirectory();
  } else {
    return false;
  }
};

//0. list packages
const run = async () => {
  installed = await isDemoInstalled();

  if (!installed) {
    throw new Error("You need to run yarn install in 'demo'");
  }

  console.log('scope: ', argv.scope);

  if (argv.scope) {
    const babel = spawn(
      './node_modules/.bin/babel',
      [
        `packages/${argv.scope}/src`,
        '--watch',
        '--out-dir',
        `demo/node_modules/@pie-lib/${argv.scope}/lib`,
        '--ignore',
        'node_modules',
        '--source-maps',
        'inline'
      ],
      { stdio: 'inherit' }
    );
    babel.on('error', e => {
      console.error('babel: error: ', e);
    });
    babel.on('data', function() {
      console.log('babel: ', arguments);
    });
  }

  const nextCmd = './node_modules/.bin/next';

  spawnSync(nextCmd, {
    cwd: 'demo',
    stdio: 'inherit',
    env: Object.assign({}, process.env, { NODE_ENV: 'development' })
  });
};

run()
  .then(() => {
    console.log('running');
  })
  .catch(e => {
    console.error(e);
    throw e;
  });
